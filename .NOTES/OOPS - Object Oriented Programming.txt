OOPS - Object Oriented Programming
Object -> an object is a real world entity around which all the methods and features are implemented

classes  -> class is a blueprint of an object. class can be considered as a container inside which we define all the methods and other features to encapsulate them in a single block 
methods  ->  is a block of code which can be executed as the demand comes in. 
function is an independent entity but method is defined inside a class, 
Inheritance  -> inheritance is the technique in which a child class inherits the properties of a parent class. Inheritance can be implemented in multiple ways:-
1. single inheritance :-   parent class -> child class
2. Multi level inheritance :- grand parent -> parent -> child
3. Multi child inheritance :- parent ->
					child 1
					child 2
4. Multi-Parent inheritance:- Diamond relationship 
		parent1    Parent2
		   child1,child2

Polymorphism :-  when one thing has many forms, then it is known as polymorphism
		it can be implemented using method overloading, method overriding, constructor overloading
Encapsulation :- to bind together multiple classes, methods etc. to use them as a single entity
Abstraction:- Abstraction is used to hide the complexity of the project and show only necessary features. 
Exception Handling :
Exception :- Error , on which no rules are getting applied, 
		-> Exception can be any situation when no  rules are getting applied
		-> Exception can be generated by logically incorrect code, input received from user etc.
Exception 
	-> Runtime Exception
	-> compile time exception
	-> error - when the program stops abruptly due to power outage, memory overload or any other system generated problem

To use try, except block:-
	try:
		code
	except exceptionname:
		code
or
	try:
		code
	except (errorname1, errorname2, errornamen):
		code
or    Multi except blocks
	try:
		code
	except exceptionclassname:
		code
	except exceptionclassname:
		code
or nested try except blocks
	try:
		code   an exception comes at this point,it will go to last except 
		try:
			code  : if the exception comes at this point, it goes to second last
			if second last is unable to handle this exception
		except classname:
			code
	except classname:
		code
else: block : - it gets executed if the code is correct
finally block :- it gets executed in any situation, if there is exception or not, it will get executed in any case

raising exceptions: to raise an exception by ourseleves


=> To raise an exception by ourseleves, we use raise keyword:-
	raise exceptionname(message)

2. Write a Python program that prompts the user to input an integer and raises(use custom exception to raise this error: it will be raised if the value provided is not between 1 to 1000) a
ValueError exception if the input is not a valid integer.

class classname:
	code
	method

Custom exception class

class classname(exceptionclassname):
	def __init__(self,argument): 
		code


